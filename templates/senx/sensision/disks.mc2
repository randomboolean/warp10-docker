0 MACROTTL
{
  'name' '@senx/sensision/disks'
  'desc' 
  <'
 Get the Disks data from the Sensision.
  '>
  'sig' [ [ [ 'token:STRING' 'period:STRING' ] [ 'result:MAP'  ] ] ] // Signature
  'params' {
    'token' 'The sensision read token'
    'period' 'The period to query (h: hour, d: day, w: week, m: month, y: year)'
    'result' 'The result map'
  }
  'examples' [
    <'

    '>
  ]
} 'info' STORE

<%
  !$info INFO
  SAVE 'context' STORE
  <%
    @senx/sensision/utils/periodMappings
    [ 'token' 'period' ] STORE
    [ $token '~linux.df.bytes.(capacity|free)' { 'device' '~/dev/.*' } NOW $periods $period GET ] FETCH
    [ SWAP bucketizer.mean NOW 0 $buckets $period GET ] BUCKETIZE
    [ SWAP 1.0 1024.0 1024.0 * 1024.0 * / mapper.mul 0 0 0 ] MAP 'gts' STORE
    [ $gts [] 'linux.df.bytes.capacity' filter.byclass ] FILTER [ SWAP [] reducer.sum ] REDUCE 'capacity' STORE
    [ $gts [] 'linux.df.bytes.free' filter.byclass ] FILTER [ SWAP [] reducer.sum ] REDUCE [ SWAP -1.0 mapper.mul 0 0 0 ] MAP  'free' STORE
    [ [ $capacity $free ] FLATTEN  [] reducer.sum ] REDUCE
    'data' STORE
    {
        'data' $data
        'max' $capacity 0 GET VALUES MAX
    }
  %>
  <% // catch any exception
    RETHROW
  %>
  <% // finally, restore the context
    $context RESTORE
  %> TRY
%>
'macro' STORE

// Unit tests

$macro